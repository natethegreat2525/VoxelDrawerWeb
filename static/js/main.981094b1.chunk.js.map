{"version":3,"sources":["components/cubebuilder.js","components/engine/linkedlist.js","components/blocktypes.js","components/blockworld.js","components/blockview.js","components/Main.js","components/controls.js","index.js"],"names":["gidx","w","h","d","x","y","z","addCube","geom","offs","faces","localLight","color","idx3","cubeFaceArr","makeFace","cb","axis","pairity","_geom$vertices","base","vertices","length","push","apply","Object","toConsumableArray","map","color0","THREE","color1","color2","color3","black","totLight","Array","fill","i","a","b","sum","c","tmp","lerp","vertexColors","v","add","Node","val","prev","next","classCallCheck","this","value","LinkedList","start","end","len","createClass","key","node","r","remove","undefined","blockTypes","posMod","m","ChunkCache","capacity","cache","heightMap","chunk","str","coordToString","pos","getChunk","updateHeightsForChunk","unshift","peekFirst","pop","heightChunk","Uint16Array","WIDTH","j","k","data","Math","max","floor","cv","coords","addOptChunk","Chunk","addChunk","idx","getBlockValue","dirty","co","dir","stepDist","steps","cur","stepDir","clone","normalize","multiplyScalar","whole","position","blockPosition","maxDist","getTimeX","getTimeY","getTimeZ","curBlock","dirBlock","curPos","Infinity","incPos","time","normal","distanceTo","tx","ty","tz","newNode","p","ChunkView","size","offset","Vector3","chunks","scene","limit","count","geometry","dispose","material","buildChunk","gen","chunkCache","sp2","extChunk","light","lowPos","rx","ry","rz","cx","cy","cz","ch","getHeight","array","computeFaceNormals","builder","glCanvas","glWidth","glHeight","renderer","running","camera","view","width","depth","height","yAng","xAng","PI","mouseX","mouseY","cube","lastRay","selectedBlock","zoom","previewCube","midStart","update","now","center","sin","cos","set","rotation","children","scVec","camDir","unproject","sub","ray","rayCast","rebuildDirty","newlyLoaded","render","requestAnimationFrame","getState","state","g","resize","setBlockValue","Controls","props","_this","possibleConstructorReturn","getPrototypeOf","call","colors","selected","addColor","sqrt","clickColor","name","_this2","e","setState","defineProperty","parseInt","target","_this3","_this4","selectColor","textValue","JSON","stringify","parse","loadState","document","getElementById","select","execCommand","_this5","style","padding","margin","borderWidth","background","borderStyle","borderColor","react_default","createElement","onClick","_this6","display","flexDirection","type","onChange","setColor","maxWidth","getPallette","onSave","onLoad","onCopy","id","onTextUpdated","React","Component","canvas","body","setAttribute","root","ReactDOM","controls_Controls","gl","getContext","clearColor","clear","COLOR_BUFFER_BIT","console","log","setClearColor","aspect","updateProjectionMatrix","isDown","moved","oncontextmenu","preventDefault","addEventListener","evt","movementX","movementY","abs","offsetX","offsetY","button","pos1","pos2","lowX","min","lowY","lowZ","highX","highY","highZ","deltaY","cameraReal","sun","ambient","scale","transparent","opacity","initGraphics","alert"],"mappings":"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","file":"static/js/main.981094b1.chunk.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nexport function newBlockMesh(array, w, h, d, light) {\r\n    let idx = gidx(w, h, d);\r\n    let idx3 = gidx(3, 3, 3);\r\n    if (!light) {\r\n        light = new Array(w * h * d);\r\n        for (let i = 0; i < w; i++) {\r\n            for (let j = 0; j < h; j++) {\r\n                for (let k = 0; k < d; k++) {\r\n                    light[idx(i, j, k)] = array[idx(i, j, k)] ? 0 : 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let geom = new THREE.Geometry();\r\n    for (let i = 1; i < w-1; i++) {\r\n        for (let j = 1; j < h-1; j++) {\r\n            for (let k = 1; k < d-1; k++) {\r\n                if (array[idx(i, j, k)]) {\r\n                    let localLight = [];\r\n                    for (let a = -1; a < 2; a++) {\r\n                        for (let b = -1; b < 2; b++) {\r\n                            for (let c = -1; c < 2; c++) {\r\n                                localLight.push(light[idx(i+a, j+b, k+c)]);\r\n                            }\r\n                        }\r\n                    }\r\n                    addCube(\r\n                        geom,\r\n                        new THREE.Vector3(i, j, k),\r\n                        [!array[idx(i, j, k-1)], !array[idx(i, j, k+1)], !array[idx(i, j-1, k)], !array[idx(i, j+1, k)], !array[idx(i-1, j, k)], !array[idx(i+1, j, k)]],\r\n                        localLight,\r\n                        array[idx(i, j, k)],\r\n                        idx3\r\n                        );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    geom.computeFaceNormals();\r\n\r\n    let material = new THREE.MeshBasicMaterial(\r\n        {\r\n            vertexColors: THREE.VertexColors,\r\n        }\r\n    );\r\n\r\n    let obj = new THREE.Mesh(\r\n        geom,\r\n        material,\r\n    );\r\n    return obj;\r\n}\r\n\r\nexport function gidx(w, h, d) {\r\n    return (x, y, z) => (x + y*w + z*w*h);\r\n}\r\n\r\nexport function addCube(geom, offs, faces, localLight, color, idx3) {\r\n    const cubeFaceArr = [[0, 0], [1, 0], [1, 1], [0, 1]];\r\n    let makeFace = (cb, axis, pairity) => {\r\n        let base = geom.vertices.length;\r\n        geom.vertices.push(...cubeFaceArr.map(cb));\r\n        //crazy light logic\r\n        let color0 = new THREE.Color(color);\r\n        let color1 = new THREE.Color(color);\r\n        let color2 = new THREE.Color(color);\r\n        let color3 = new THREE.Color(color);\r\n        let black = new THREE.Color('#000000');\r\n\r\n        let totLight = new Array(4).fill(0);\r\n\r\n        let i = 0;\r\n        for (let a = 0; a < 2; a++) {\r\n            for (let b = 0; b < 2; b++) {\r\n                let sum = 0;\r\n                for (let c = a; c < a+2; c++) {\r\n                    for (let d = b; d < b+2; d++) {\r\n                        let x = c;\r\n                        let y = d;\r\n                        let z = pairity+1;\r\n                        if (pairity === -1) {\r\n                            let tmp = x;\r\n                            x = y;\r\n                            y = tmp;\r\n                        }\r\n                        if (axis === 1) {\r\n                            let tmp = x;\r\n                            x = y;\r\n                            y = z;\r\n                            z = tmp;\r\n                        }\r\n                        if (axis === 0) {\r\n                            let tmp = x;\r\n                            x = z;\r\n                            z = y;\r\n                            y = tmp;\r\n                        }\r\n                       \r\n                        sum += localLight[idx3(z, y, x)];\r\n                    }\r\n                }\r\n                totLight[i] = 1-sum/4.0;\r\n                i++;\r\n            }\r\n        }\r\n        color0.lerp(black, totLight[0]);\r\n        color1.lerp(black, totLight[2]);\r\n        color2.lerp(black, totLight[3]);\r\n        color3.lerp(black, totLight[1]);\r\n\r\n        //end crazy light logic\r\n\r\n        if (totLight[0] + totLight[3] < totLight[2] + totLight[1]) {\r\n            geom.faces.push(new THREE.Face3(base, base+1, base+2), new THREE.Face3(base, base+2, base+3));\r\n            geom.faces[geom.faces.length-1].vertexColors = [color0, color2, color3];\r\n            geom.faces[geom.faces.length-2].vertexColors = [color0, color1, color2];\r\n        } else {\r\n            geom.faces.push(new THREE.Face3(base, base+1, base+3), new THREE.Face3(base+1, base+2, base+3));\r\n            geom.faces[geom.faces.length-1].vertexColors = [color1, color2, color3];\r\n            geom.faces[geom.faces.length-2].vertexColors = [color0, color1, color3];\r\n        }\r\n    };\r\n\r\n    if (faces[0]) {\r\n        makeFace(v => (new THREE.Vector3(v[1], v[0], 0)).add(offs), 2, -1);\r\n    }\r\n    if (faces[1]) {\r\n        makeFace(v => (new THREE.Vector3(v[0], v[1], 1)).add(offs), 2, 1);\r\n    }\r\n    if (faces[2]) {\r\n        makeFace(v => (new THREE.Vector3(v[0], 0, v[1])).add(offs), 1, -1);\r\n    }\r\n    if (faces[3]) {\r\n        makeFace(v => (new THREE.Vector3(v[1], 1, v[0])).add(offs), 1, 1);\r\n    }\r\n    if (faces[4]) {\r\n        makeFace(v => (new THREE.Vector3(0, v[1], v[0])).add(offs), 0, -1);\r\n    }\r\n    if (faces[5]) {\r\n        makeFace(v => (new THREE.Vector3(1, v[0], v[1])).add(offs), 0, 1);\r\n    }\r\n}","class Node {\r\n    constructor(val, prev, next) {\r\n        this.prev = prev;\r\n        this.next = next;\r\n        this.value = val;\r\n    }\r\n}\r\n\r\nexport class LinkedList {\r\n    constructor() {\r\n        this.start = null;\r\n        this.end = null;\r\n        this.len = 0;\r\n    }\r\n\r\n    push(val) {\r\n        this.len++;\r\n        if (!this.end) {\r\n            this.start = new Node(val);\r\n            this.end = this.start;\r\n            return;\r\n        }\r\n        let node = new Node(val, this.end);\r\n        this.end.next = node;\r\n        this.end = node;\r\n    }\r\n\r\n    pop(r) {\r\n        if (!this.end) {\r\n            return undefined;\r\n        }\r\n        let node = this.end;\r\n        this.remove(node);\r\n        return r ? node : node.value;\r\n    }\r\n\r\n    peekLast(r) {\r\n        if (!this.end) {\r\n            return undefined;\r\n        }\r\n        return r ? this.end : this.end.value;\r\n    }\r\n\r\n    peekFirst(r) {\r\n        if (!this.start) {\r\n            return undefined;\r\n        }\r\n        return r ? this.start : this.start.value;\r\n    }\r\n\r\n    unshift(val) {\r\n        this.len++;\r\n        if (!this.start) {\r\n            this.end = new Node(val);\r\n            this.start = this.end;\r\n            return;\r\n        }\r\n        let node = new Node(val, undefined, this.start);\r\n        this.start.prev = node;\r\n        this.start = node;\r\n    }\r\n\r\n    shift(r) {\r\n        if (!this.start) {\r\n            return undefined;\r\n        }\r\n        let node = this.start;\r\n        this.remove(node);\r\n        return r ? node : node.value;\r\n    }\r\n\r\n    remove(node) {\r\n        if (node.prev) {\r\n            node.prev.next = node.next;\r\n        } else {\r\n            this.start = node.next;\r\n        }\r\n        if (node.next) {\r\n            node.next.prev = node.prev;\r\n        } else {\r\n            this.end = node.prev;\r\n        }\r\n        this.len--;\r\n    }\r\n}\r\n\r\n/*\r\nlet ll = new LinkedList();\r\n\r\nconsole.log(ll);\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n    ll.push(i);\r\n}\r\nconsole.log(ll.len, 10);\r\nfor (let i = 0; i < 10; i++) {\r\n    console.log(ll.peekLast(), ll.pop());\r\n}\r\nconsole.log(ll.len);\r\n\r\nconsole.log(ll);\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n    ll.unshift(i);\r\n}\r\nconsole.log(ll.len, 10);\r\nfor (let i = 0; i < 10; i++) {\r\n    console.log(ll.peekFirst(), ll.shift());\r\n}\r\nconsole.log(ll.len);\r\n\r\nconsole.log(ll);\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n    ll.unshift(i);\r\n}\r\nconsole.log(ll.len, 10);\r\nfor (let i = 0; i < 10; i++) {\r\n    console.log(ll.peekLast(), ll.pop());\r\n}\r\nconsole.log(ll.len);\r\n\r\nconsole.log(ll);\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n    ll.push(i);\r\n}\r\nconsole.log(ll.len, 10);\r\nfor (let i = 0; i < 10; i++) {\r\n    console.log(ll.peekFirst(), ll.shift());\r\n}\r\nconsole.log(ll.len);\r\n\r\nconsole.log(ll);\r\n*/","import * as THREE from \"three\";\r\n\r\nexport let blockTypes = [null, new THREE.Color(0x666666)];\r\n\r\nexport function posMod(val, m) {\r\n    let v = val % m;\r\n    if (v < 0) {\r\n        v += m;\r\n    }\r\n    return v;\r\n}","import { LinkedList } from './engine/linkedlist';\r\nimport * as THREE from 'three';\r\nimport { posMod } from './blocktypes';\r\nimport { Vector3 } from 'three';\r\n\r\nexport class ChunkCache {\r\n    constructor(capacity) {\r\n        this.capacity = capacity || 2000;\r\n        this.cache = new LinkedList();\r\n        this.map = {};\r\n        this.heightMap = {};\r\n    }\r\n\r\n    addChunk(chunk) {\r\n        let str = this.coordToString(chunk.pos);\r\n        if (this.map[str]) {\r\n            this.map[str].value = chunk;\r\n            this.getChunk(chunk.pos);\r\n            this.updateHeightsForChunk(chunk);\r\n            return;\r\n        }\r\n        this.cache.unshift(chunk);\r\n        this.updateHeightsForChunk(chunk);\r\n        this.map[this.coordToString(chunk.pos)] = this.cache.peekFirst(true);\r\n        if (this.cache.len > this.capacity) {\r\n            delete this.map[this.coordToString(this.cache.pop().pos)];\r\n        }\r\n    }\r\n\r\n    updateHeightsForChunk(chunk) {\r\n        let heightChunk = this.heightMap[chunk.pos.x + ',' + chunk.pos.z];\r\n        if (!heightChunk) {\r\n            heightChunk = new Uint16Array(WIDTH*WIDTH);\r\n            this.heightMap[chunk.pos.x + ',' + chunk.pos.z] = heightChunk;\r\n        }\r\n\r\n        for (let i = 0; i < WIDTH; i++) {\r\n            for (let j = 0; j < WIDTH; j++) {\r\n                for (let k = 0; k < WIDTH; k++) {\r\n                    if (chunk.data[i + j*WIDTH + k*WIDTH*WIDTH]) {\r\n                        heightChunk[i + k*WIDTH] = Math.max(heightChunk[i + k*WIDTH], j + chunk.pos.y * WIDTH);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getHeight(x, z) {\r\n        let v = new THREE.Vector3(\r\n            posMod(Math.floor(x), WIDTH),\r\n            0,\r\n            posMod(Math.floor(z), WIDTH),\r\n        );\r\n\r\n        let cv = {\r\n            x: Math.floor(x/WIDTH),\r\n            z: Math.floor(z/WIDTH),\r\n        };\r\n\r\n        let heightMap = this.heightMap[cv.x + ',' + cv.z];\r\n        if (!heightMap) {\r\n            return;\r\n        }\r\n\r\n        return heightMap[v.x + v.z * WIDTH];\r\n    }\r\n\r\n    getBlockValue(coords) {\r\n        let v = new THREE.Vector3(\r\n            posMod(Math.floor(coords.x), WIDTH),\r\n            posMod(Math.floor(coords.y), WIDTH),\r\n            posMod(Math.floor(coords.z), WIDTH),\r\n        );\r\n\r\n        let cv = {\r\n            x: Math.floor(coords.x/WIDTH),\r\n            y: Math.floor(coords.y/WIDTH),\r\n            z: Math.floor(coords.z/WIDTH),\r\n        };\r\n\r\n        let chunk = this.getChunk(cv);\r\n        if (!chunk) {\r\n            return;\r\n        }\r\n\r\n        return chunk.data[v.x + v.y * WIDTH + v.z * WIDTH * WIDTH];\r\n    }\r\n\r\n    setBlockValue(coords, value, addOptChunk) {\r\n        let v = new THREE.Vector3(\r\n            posMod(Math.floor(coords.x), WIDTH),\r\n            posMod(Math.floor(coords.y), WIDTH),\r\n            posMod(Math.floor(coords.z), WIDTH),\r\n        );\r\n\r\n        let cv = {\r\n            x: Math.floor(coords.x/WIDTH),\r\n            y: Math.floor(coords.y/WIDTH),\r\n            z: Math.floor(coords.z/WIDTH),\r\n        };\r\n\r\n        let chunk = this.getChunk(cv);\r\n        if (!chunk) {\r\n            if (!addOptChunk) {\r\n                return;\r\n            }\r\n            chunk = new Chunk(new THREE.Vector3(cv.x, cv.y, cv.z));\r\n            this.addChunk(chunk);\r\n        }\r\n        let idx = v.x + v.y * WIDTH + v.z * WIDTH * WIDTH;\r\n        let heightChunk = this.heightMap[cv.x + ',' + cv.z];\r\n        if (!chunk.data[idx] && value) {\r\n            heightChunk[v.x + v.z*WIDTH] = Math.max(heightChunk[v.x + v.z*WIDTH], coords.y);\r\n        }\r\n        if (chunk.data[idx] && !value && coords.y === heightChunk[v.x + v.z*WIDTH]) {\r\n            for (let i = coords.y-1; i >= 0; i--) {\r\n                heightChunk[v.x + v.z*WIDTH] = i;\r\n                if (this.getBlockValue(new THREE.Vector3(coords.x, i, coords.z))) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        chunk.data[idx] = value;\r\n        chunk.dirty = true;\r\n        if (v.x === 0) {\r\n            let co = this.getChunk({x: cv.x-1, y: cv.y, z: cv.z});\r\n            if (co) {\r\n                co.dirty = true;\r\n            }\r\n        }\r\n        if (v.y === 0) {\r\n            let co = this.getChunk({x: cv.x, y: cv.y-1, z: cv.z});\r\n            if (co) {\r\n                co.dirty = true;\r\n            }\r\n        }\r\n        if (v.z === 0) {\r\n            let co = this.getChunk({x: cv.x, y: cv.y, z: cv.z-1});\r\n            if (co) {\r\n                co.dirty = true;\r\n            }\r\n        }\r\n        if (v.x === WIDTH-1) {\r\n            let co = this.getChunk({x: cv.x+1, y: cv.y, z: cv.z});\r\n            if (co) {\r\n                co.dirty = true;\r\n            }\r\n        }\r\n        if (v.y === WIDTH-1) {\r\n            let co = this.getChunk({x: cv.x, y: cv.y+1, z: cv.z});\r\n            if (co) {\r\n                co.dirty = true;\r\n            }\r\n        }\r\n        if (v.z === WIDTH-1) {\r\n            let co = this.getChunk({x: cv.x, y: cv.y, z: cv.z+1});\r\n            if (co) {\r\n                co.dirty = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    rayCastOld(pos, dir, stepDist, steps) {\r\n        let cur = new THREE.Vector3(pos.x, pos.y, pos.z);\r\n        let stepDir = dir.clone().normalize().multiplyScalar(stepDist);\r\n        for (let i = 0; i <= steps; i++) {\r\n            let whole = new THREE.Vector3(Math.floor(cur.x), Math.floor(cur.y), Math.floor(cur.z));\r\n            let val = this.getBlockValue(whole);\r\n            if (val) {\r\n                return {position: cur, blockPosition: whole, value: val};\r\n            }\r\n            cur = cur.add(stepDir);\r\n        }\r\n    }\r\n\r\n    rayCast(pos, dir, maxDist) {\r\n        let curBlock = {\r\n            x: Math.floor(pos.x),\r\n            y: Math.floor(pos.y),\r\n            z: Math.floor(pos.z),\r\n        }\r\n        let dirBlock = {\r\n            x: dir.x > 0 ? 1 : -1,\r\n            y: dir.y > 0 ? 1 : -1,\r\n            z: dir.z > 0 ? 1 : -1,\r\n        }\r\n        let curPos = pos.clone();\r\n        let getTimeX, getTimeY, getTimeZ;\r\n        if (dir.x > 0) {\r\n            getTimeX = () => dir.x === 0 ? Infinity : (curBlock.x+1 - curPos.x) / dir.x;\r\n        } else {\r\n            getTimeX = () => dir.x === 0 ? Infinity : (curBlock.x - curPos.x) / dir.x;\r\n        }\r\n        if (dir.y > 0) {\r\n            getTimeY = () => dir.y === 0 ? Infinity : (curBlock.y+1 - curPos.y) / dir.y;\r\n        } else {\r\n            getTimeY = () => dir.y === 0 ? Infinity : (curBlock.y - curPos.y) / dir.y;\r\n        }\r\n        if (dir.z > 0) {\r\n            getTimeZ = () => dir.z === 0 ? Infinity : (curBlock.z+1 - curPos.z) / dir.z;\r\n        } else {\r\n            getTimeZ = () => dir.z === 0 ? Infinity : (curBlock.z - curPos.z) / dir.z;\r\n        }\r\n        let incPos = (time) => {\r\n            curPos.x += dir.x*time;\r\n            curPos.y += dir.y*time;\r\n            curPos.z += dir.z*time;            \r\n        }\r\n        let normal = new THREE.Vector3();\r\n        for (let i = 0; i < maxDist*3; i++) {\r\n            //check current block\r\n            let val = this.getBlockValue(curBlock);\r\n            if (val) {\r\n                if (curPos.distanceTo(pos) <= maxDist) {\r\n                    return {position: curPos, blockPosition: curBlock, value: val, normal: normal};\r\n                }\r\n                return null;\r\n            }\r\n\r\n            //move forward\r\n            let tx = getTimeX();\r\n            let ty = getTimeY();\r\n            let tz = getTimeZ();\r\n            if (tx < ty && tx < tz) {\r\n                incPos(tx);\r\n                curBlock.x += dirBlock.x;\r\n                normal = new THREE.Vector3(-dirBlock.x, 0, 0);\r\n            } else if (ty < tz) {\r\n                incPos(ty);\r\n                curBlock.y += dirBlock.y;\r\n                normal = new THREE.Vector3(0, -dirBlock.y, 0);\r\n            } else {\r\n                incPos(tz);\r\n                curBlock.z += dirBlock.z;\r\n                normal = new THREE.Vector3(0, 0, -dirBlock.z);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getChunk(coords) {\r\n        let str = this.coordToString(coords);\r\n        let node = this.map[str];\r\n        if (node) {\r\n            this.cache.remove(node);\r\n            this.cache.unshift(node.value);\r\n            let newNode = this.cache.peekFirst(true);\r\n            this.map[str] = newNode;\r\n            return newNode.value;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    coordToString(p) {\r\n        return p.x + ',' + p.y + ',' + p.z;\r\n    }\r\n}\r\n\r\nexport const WIDTH = 16;\r\n\r\nexport class Chunk {\r\n\r\n    constructor(pos) {\r\n        this.pos = pos;\r\n        this.dirty = true;\r\n        this.data = new Uint16Array(WIDTH*WIDTH*WIDTH);\r\n    }\r\n}\r\n\r\nexport class Vec3 {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n}","import { Vector3 } from \"three\";\r\nimport * as builder from './cubebuilder';\r\nimport { WIDTH } from \"./blockworld\";\r\nimport { blockTypes, posMod } from \"./blocktypes\";\r\n\r\nexport class ChunkView {\r\n    constructor(size) {\r\n        this.size = size;\r\n        this.offset = new Vector3(0, 0, 0);\r\n        this.chunks = new Array(this.size.x * this.size.y * this.size.z);\r\n    }\r\n\r\n    rebuildDirty(cache, scene, limit) {\r\n        let count = 0;\r\n        limit = limit || Infinity;\r\n        for (let i = 0; i < this.size.x; i++) {\r\n            for (let j = 0; j < this.size.y; j++) {\r\n                for (let k = 0; k < this.size.z; k++) {\r\n                    let pos = new Vector3(i+this.offset.x, j+this.offset.y, k+this.offset.z);\r\n                    let chunk = cache.getChunk(pos)\r\n                    if (chunk && chunk.dirty) {\r\n                        let idx = i+j*this.size.x+k*this.size.x*this.size.y;\r\n                        if (this.chunks[idx]) {\r\n                            scene.remove(this.chunks[idx]);\r\n                            this.chunks[idx].geometry.dispose();\r\n                            this.chunks[idx].material.dispose();\r\n                        }\r\n                        this.chunks[idx] = this.buildChunk(cache, pos);\r\n                        this.chunks[idx].position.x = pos.x*WIDTH-1;\r\n                        this.chunks[idx].position.y = pos.y*WIDTH-1;\r\n                        this.chunks[idx].position.z = pos.z*WIDTH-1;\r\n                        chunk.dirty = false;\r\n                        scene.add(this.chunks[idx]);\r\n                        count++;\r\n                        if (count >= limit) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fill(gen, chunkCache) {\r\n        for (let x = 0; x < this.size.x; x++) {\r\n            for (let y = 0; y < this.size.y; y++) {\r\n                for (let z = 0; z < this.size.z; z++) {\r\n                    chunkCache.addChunk(gen.getChunk(new Vector3(x+this.offset.x, y+this.offset.y, z+this.offset.z)));\r\n                }\r\n            }\r\n        }\r\n        for (let x = 0; x < this.size.x; x++) {\r\n            for (let y = 0; y < this.size.y; y++) {\r\n                for (let z = 0; z < this.size.z; z++) {\r\n                    let pos = new Vector3(x + this.offset.x, y + this.offset.y, z + this.offset.z)\r\n                    let chunk = chunkCache.getChunk(pos);\r\n                    if (chunk) {\r\n                        let idx = x + y*this.size.x + z * this.size.x * this.size.y;\r\n                        this.chunks[idx] = this.buildChunk(chunkCache, pos);\r\n                        this.chunks[idx].position.x = pos.x*WIDTH-1;\r\n                        this.chunks[idx].position.y = pos.y*WIDTH-1;\r\n                        this.chunks[idx].position.z = pos.z*WIDTH-1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addToScene(scene) {\r\n        for (let x = 0; x < this.chunks.length; x++) {\r\n            scene.add(this.chunks[x]);\r\n        }\r\n    }\r\n\r\n\r\n    buildChunk(cache, pos) {\r\n        let chunk = cache.getChunk(pos);\r\n        if (chunk) {\r\n            chunk.dirty = false;\r\n        }\r\n        let sp2 = WIDTH + 2;\r\n        let extChunk = new Array(sp2*sp2*sp2);\r\n        let light = new Array(sp2*sp2*sp2);\r\n        let lowPos = pos.clone().multiplyScalar(WIDTH);\r\n        for (let x = lowPos.x-1; x < lowPos.x+WIDTH+1; x++) {\r\n            let rx = x - lowPos.x + 1;\r\n            for (let y = lowPos.y-1; y < lowPos.y+WIDTH+1; y++) {\r\n                let ry = y - lowPos.y + 1;\r\n                for (let z = lowPos.z-1; z < lowPos.z+WIDTH+1; z++) {\r\n                    let rz = z - lowPos.z + 1;\r\n                    let val = 1\r\n                    let cx = Math.floor(x / WIDTH);\r\n                    let cy = Math.floor(y / WIDTH);\r\n                    let cz = Math.floor(z / WIDTH);\r\n                    let ch = cache.getChunk(new Vector3(cx, cy, cz));\r\n                    if (ch) {\r\n                        val = ch.data[posMod(x,WIDTH)+posMod(y,WIDTH)*WIDTH+posMod(z,WIDTH)*WIDTH*WIDTH];\r\n                    }\r\n                    let idx = rx+ry*sp2+rz*sp2*sp2;\r\n                    extChunk[idx] = blockTypes[val];\r\n                    if (val) {\r\n                        light[idx] = 0;\r\n                    } else {\r\n                        if (y >= cache.getHeight(x, z)) {\r\n                            light[idx] = 1;\r\n                        } else {\r\n                            light[idx] = 0.5;\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        let chunk = cache.getChunk(pos);\r\n        for (let x = 0; x < WIDTH; x++) {\r\n            for (let y = 0; y < WIDTH; y++) {\r\n                for (let z = 0; z < WIDTH; z++) {\r\n                    extChunk[x+1+(y+1)*sp2+(z+1)*sp2*sp2] = blockTypes[chunk.data[x+y*WIDTH+z*WIDTH*WIDTH]];\r\n                }\r\n            }\r\n        }\r\n\r\n        let chunkLeft = cache.getChunk(pos);\r\n        if (chunkLeft) {\r\n            for (let y = 0; y < WIDTH; y++) {\r\n                for (let z = 0; z < WIDTH; z++) {\r\n                    extChunk[(y+1)*sp2+(z+1)*sp2*sp2] = blockTypes[chunkLeft.data[WIDTH-1+y*WIDTH+z*WIDTH*WIDTH]];\r\n                }\r\n            }\r\n        }\r\n\r\n        let chunkRight = cache.getChunk(pos);\r\n        if (chunkRight) {\r\n            for (let y = 0; y < WIDTH; y++) {\r\n                for (let z = 0; z < WIDTH; z++) {\r\n                    extChunk[WIDTH+1+(y+1)*sp2+(z+1)*sp2*sp2] = blockTypes[chunkRight.data[y*WIDTH+z*WIDTH*WIDTH]];\r\n                }\r\n            }\r\n        }\r\n\r\n        let chunkUp = cache.getChunk(pos);\r\n        if (chunkUp) {\r\n            for (let x = 0; x < WIDTH; x++) {\r\n                for (let z = 0; z < WIDTH; z++) {\r\n                    extChunk[x+1+(z+1)*sp2*sp2] = blockTypes[chunkUp.data[x+(WIDTH-1)*WIDTH+z*WIDTH*WIDTH]];\r\n                }\r\n            }\r\n        }\r\n\r\n        let chunkDown = cache.getChunk(pos);\r\n        if (chunkDown) {\r\n            for (let x = 0; x < WIDTH; x++) {\r\n                for (let z = 0; z < WIDTH; z++) {\r\n                    extChunk[x+1+(WIDTH+1)*sp2+(z+1)*sp2*sp2] = blockTypes[chunkDown.data[x+z*WIDTH*WIDTH]];\r\n                }\r\n            }\r\n        }\r\n\r\n        let chunkFront = cache.getChunk(pos);\r\n        if (chunkFront) {\r\n            for (let x = 0; x < WIDTH; x++) {\r\n                for (let y = 0; y < WIDTH; y++) {\r\n                    extChunk[x+1+(y+1)*sp2] = blockTypes[chunkFront.data[x+(WIDTH-1)*WIDTH+z*WIDTH*WIDTH]];\r\n                }\r\n            }\r\n        }\r\n\r\n        */\r\n        \r\n        return builder.newBlockMesh(extChunk, WIDTH+2, WIDTH+2, WIDTH+2, light);\r\n    }\r\n}","import * as THREE from 'three';\r\nimport { ChunkView } from './blockview';\r\nimport { ChunkCache, WIDTH } from './blockworld';\r\nimport { Vector3 } from 'three';\r\nimport { Empty } from './terraingen';\r\nimport { blockTypes } from './blocktypes';\r\n\r\n\r\nlet glCanvas = null;\r\nlet glCtx = null;\r\nlet glWidth = 0;\r\nlet glHeight = 0;\r\nlet renderer = null;\r\nlet running = false;\r\nlet scene = null;\r\nlet camera = null;\r\nlet view = null;\r\nlet cache = null;\r\nlet width = 10;\r\nlet depth = 10;\r\nlet height = 10;\r\nlet yAng = 0;\r\nlet xAng = Math.PI / 8;\r\nlet mouseX = 0;\r\nlet mouseY = 0;\r\nlet cube = null;\r\nlet lastRay = null;\r\nlet selectedBlock = 1;\r\nlet zoom = 20;\r\nlet previewCube = null;\r\nlet midStart = null;\r\n\r\nexport function initGraphics(canvas, gl, w, h) {\r\n    console.log('init');\r\n\r\n    glCanvas = canvas;\r\n    glCtx = gl;\r\n    glWidth = w;\r\n    glHeight = h;\r\n    renderer = new THREE.WebGLRenderer({canvas: glCanvas});\r\n\r\n    renderer.setClearColor(0xbedfff);\r\n    \r\n    if (running) {\r\n        camera.children[0].aspect = glWidth/glHeight;\r\n        camera.children[0].updateProjectionMatrix();\r\n        return;\r\n    }\r\n\r\n    let isDown = false;\r\n    let moved = false;\r\n\r\n    canvas.oncontextmenu = (e) => {\r\n        if (!moved) {\r\n            if (lastRay) {\r\n                let pos = new Vector3(lastRay.blockPosition.x, lastRay.blockPosition.y, lastRay.blockPosition.z)\r\n                if (pos.x >= 1 && pos.x < 1+width && pos.y >= 2 && pos.y < 2+height && pos.z >= 1 && pos.z < 1+depth) {\r\n                    cache.setBlockValue(new Vector3(pos.x, pos.y, pos.z), 0, true);\r\n                }\r\n            }\r\n        }\r\n        e.preventDefault();\r\n    }\r\n\r\n    canvas.addEventListener('mousemove', (evt) => {\r\n        if (isDown && !midStart) {\r\n            yAng -= evt.movementX * 0.005;\r\n            xAng += evt.movementY * 0.005;\r\n            if (Math.abs(evt.movementX) > 1 || Math.abs(evt.movementY) > 1) {\r\n                moved = true;\r\n            }\r\n        }\r\n        mouseX = evt.offsetX;\r\n        mouseY = evt.offsetY;\r\n    });\r\n\r\n    canvas.addEventListener('mousedown', e => {\r\n        if (e.button === 1) {\r\n            midStart = lastRay;\r\n        }\r\n        isDown = true;\r\n        moved = false;\r\n    });\r\n\r\n    canvas.addEventListener('mouseup', (e) => {\r\n        isDown = false;\r\n        if (!moved && e.button === 0) {\r\n            if (lastRay) {\r\n                let pos = new Vector3(lastRay.blockPosition.x, lastRay.blockPosition.y, lastRay.blockPosition.z).add(lastRay.normal);\r\n                if (pos.x >= 1 && pos.x < 1+width && pos.y >= 2 && pos.y < 2+height && pos.z >= 1 && pos.z < 1+depth) {\r\n                    cache.setBlockValue(new Vector3(pos.x, pos.y, pos.z), selectedBlock, true);\r\n                }\r\n            }\r\n        }\r\n        if (e.button === 1 && midStart && lastRay) {\r\n            let pos1 = new Vector3(midStart.blockPosition.x, midStart.blockPosition.y, midStart.blockPosition.z);\r\n            let pos2 = new Vector3(lastRay.blockPosition.x, lastRay.blockPosition.y, lastRay.blockPosition.z);\r\n            if (pos1.x >= 1 && pos1.x < 1+width && pos1.y >= 2 && pos1.y < 2+height && pos1.z >= 1 && pos1.z < 1+depth) {\r\n                if (pos2.x >= 1 && pos2.x < 1+width && pos2.y >= 2 && pos2.y < 2+height && pos2.z >= 1 && pos2.z < 1+depth) {\r\n                    let lowX = Math.min(pos1.x, pos2.x);\r\n                    let lowY = Math.min(pos1.y, pos2.y);\r\n                    let lowZ = Math.min(pos1.z, pos2.z);\r\n                    let highX = Math.max(pos1.x, pos2.x);\r\n                    let highY = Math.max(pos1.y, pos2.y);\r\n                    let highZ = Math.max(pos1.z, pos2.z);\r\n                    pos1.x = lowX;\r\n                    pos1.y = lowY;\r\n                    pos1.z = lowZ;\r\n                    pos2.x = highX;\r\n                    pos2.y = highY;\r\n                    pos2.z = highZ;\r\n                    for (let x = pos1.x; x <= pos2.x; x++) {\r\n                        for (let y = pos1.y; y <= pos2.y; y++) {\r\n                            for (let z = pos1.z; z <= pos2.z; z++) {\r\n                                cache.setBlockValue(new Vector3(x, y, z), selectedBlock, true);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        midStart = null;\r\n    });\r\n\r\n    canvas.addEventListener('wheel', e => {\r\n        if (e.deltaY > 0) {\r\n            zoom *= 1.05;\r\n        }\r\n        if (e.deltaY < 0) {\r\n            zoom *= .95;\r\n        }\r\n    });\r\n\r\n    running = true;\r\n    let cameraReal = new THREE.PerspectiveCamera(50, glWidth/glHeight, 0.1, 300);\r\n    camera = new THREE.Object3D();\r\n    camera.add(cameraReal);\r\n    camera.position.set(0, 0, 10);\r\n\r\n    scene = new THREE.Scene();\r\n    scene.add(camera);\r\n\r\n    let sun = new THREE.DirectionalLight(0xffffff, 1);\r\n    scene.add(sun);\r\n    let ambient = new THREE.AmbientLight(0xffffff, .5);\r\n    scene.add(ambient);\r\n\r\n    cube = new THREE.SphereGeometry();\r\n    cube.scale(0.1, 0.1, 0.1);\r\n    let m = new THREE.MeshBasicMaterial({color: 0xff0000});\r\n    cube = new THREE.Mesh(cube, m);\r\n    scene.add(cube);\r\n\r\n    previewCube = new THREE.BoxGeometry(1, 1, 1);\r\n    m = new THREE.MeshBasicMaterial({color: 0x9999ff, transparent: true, opacity: 0.3});\r\n    previewCube = new THREE.Mesh(previewCube, m);\r\n    scene.add(previewCube);\r\n\r\n    view = new ChunkView(new THREE.Vector3(3, 3, 3));\r\n    cache = new ChunkCache();\r\n    view.offset = new THREE.Vector3(0, 0, 0);\r\n    for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j < depth; j++) {\r\n            cache.setBlockValue(new Vector3(1+i, 1, 1+j), 1, true);\r\n        }\r\n    }\r\n    requestAnimationFrame(update);\r\n}\r\n\r\nexport function addColor(color) {\r\n    blockTypes.push(new THREE.Color(color.r/255, color.g/255, color.b/255));\r\n}\r\n\r\nexport function selectColor(idx) {\r\n    selectedBlock = idx + 2;\r\n}\r\n\r\n\r\nlet oldTime = 0\r\nfunction update(now) {\r\n    let delta = (now - oldTime) / 1000.0;\r\n    oldTime = now;\r\n    let center = new Vector3((2+width) / 2, 1, (2+depth) / 2);\r\n    let offs = new Vector3(Math.sin(yAng)*Math.cos(xAng)*zoom, Math.sin(xAng)*zoom, Math.cos(yAng)*Math.cos(xAng)*zoom);\r\n    let pos = center.add(offs);\r\n    camera.position.set(pos.x, pos.y, pos.z);\r\n\r\n    camera.rotation.y = yAng;\r\n    camera.children[0].rotation.x = -xAng;\r\n\r\n    let scVec = new Vector3((mouseX / glWidth) * 2 - 1, (-mouseY / glHeight) * 2 + 1, 0.5);\r\n    scVec = scVec.clone().unproject(camera.children[0]);\r\n    let camDir = scVec.sub(camera.position);\r\n    let ray = cache.rayCast(camera.position, camDir, 50);\r\n    if (ray) {\r\n        cube.position.set(ray.position.x, ray.position.y, ray.position.z);\r\n        previewCube.position.set(ray.blockPosition.x + ray.normal.x + .5, ray.blockPosition.y + ray.normal.y+.5, ray.blockPosition.z + ray.normal.z+.5);\r\n    } else {\r\n        cube.position.set(1000, 1000, 1000);\r\n        previewCube.position.set(1000, 1000, 1000);\r\n    }\r\n    lastRay = ray;\r\n\r\n    view.rebuildDirty(cache, scene, 0);\r\n    view.newlyLoaded = false;\r\n    renderer.render(scene, camera.children[0]);\r\n    requestAnimationFrame(update);\r\n}\r\n\r\nexport function getState() {\r\n    let state = {w: width, h: height, d: depth};\r\n    state.v = new Array(width * height * depth);\r\n    let idx = 0;\r\n    for (let z = 0; z < depth; z++) {\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                state.v[idx] = cache.getBlockValue({x: x+1, y: y+2, z: z+1});\r\n                idx++;\r\n            }\r\n        }\r\n    }\r\n    state.c = [];\r\n    for (let i = 2; i < blockTypes.length; i++) {\r\n        state.c.push({r: blockTypes[i].r, g: blockTypes[i].g, b: blockTypes[i].b});\r\n    }\r\n    return state;\r\n}\r\n\r\nexport function loadState(state) {\r\n    resize(state.w, state.h, state.d);\r\n\r\n    let idx = 0\r\n    for (let z = 0; z < depth; z++) {\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                cache.setBlockValue({x: x+1, y: y+2, z: z+1}, state.v[idx], true);\r\n                idx++;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < state.c.length; i++) {\r\n        blockTypes[i+2] = new THREE.Color(state.c[i].r, state.c[i].g, state.c[i].b);\r\n    }\r\n}\r\n\r\nexport function resize(w, h, d) {\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = -1; y < height; y++) {\r\n            for (let z = 0; z < depth; z++) {\r\n                if (x >= w || y >=h || z >=d) {\r\n                    cache.setBlockValue({x: x+1, y: y+2, z: z+1}, 0, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    width = w;\r\n    height = h;\r\n    depth = d;\r\n    for (let x = 0; x < w; x++) {\r\n        for (let z = 0; z < d; z++) {\r\n            cache.setBlockValue({x: x+1, y: 1, z: z+1}, 1, true);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { getState, loadState } from './Main';\r\n\r\nexport default class Controls extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {r: 0, g: 0, b: 0, colors: [], selected: 0, w: 10, h: 10, d: 10};\r\n    }\r\n\r\n    componentWillMount() {\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                for (let k = 0; k < 4; k++) {\r\n                    this.addColor(Math.floor(Math.sqrt(i/3.0)*255), Math.floor(Math.sqrt(j/3.0)*255), Math.floor(Math.sqrt(k/3.0)*255));\r\n                }\r\n            }\r\n        }\r\n        this.clickColor(0);\r\n    }\r\n\r\n    setColor(name) {\r\n        return e => {\r\n            this.setState({[name]: parseInt((e.target.value || 0) + '')});\r\n        };\r\n    }\r\n\r\n    addColor(r, g, b) {\r\n        if (typeof r === 'undefined') {\r\n            r = this.state.r;\r\n            g = this.state.g;\r\n            b = this.state.b;\r\n        }\r\n        let colors = this.state.colors;\r\n        colors.push({r,g,b});\r\n        if (this.props.addColor) {\r\n            this.props.addColor(colors[colors.length-1]);\r\n        }\r\n        this.setState({colors: colors}, () => {\r\n            this.clickColor(colors.length - 1)();\r\n        });\r\n    }\r\n\r\n    clickColor(idx) {\r\n        return () => {\r\n            if (this.props.selectColor) {\r\n                this.props.selectColor(idx);\r\n            }\r\n            this.setState({\r\n                r: this.state.colors[idx].r,\r\n                g: this.state.colors[idx].g,\r\n                b: this.state.colors[idx].b,\r\n                selected: idx,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSave() {\r\n        this.setState({textValue: JSON.stringify(getState())})\r\n    }\r\n\r\n    onLoad() {\r\n        let data = JSON.parse(this.state.textValue);\r\n        if (!data) {\r\n            return;\r\n        }\r\n        loadState(data);\r\n        this.setState({w: data.w, h: data.h, d: data.d, colors: data.c.map(c => {return {r:c.r*255, g:c.g*255, b:c.b*255}})});\r\n        this.clickColor(0)();\r\n    }\r\n\r\n    onTextUpdated(e) {\r\n        this.setState({textValue: e.target.value});\r\n    }\r\n\r\n    onCopy() {\r\n        document.getElementById('textInput').select();\r\n        document.execCommand('copy');\r\n    }\r\n\r\n    resize() {\r\n        if (this.props.resize) {\r\n            this.props.resize(this.state.w, this.state.h, this.state.d);\r\n        }\r\n    }\r\n\r\n    getPallette() {\r\n        return this.state.colors.map((c, idx) => {\r\n            let style = {\r\n                padding: 0,\r\n                margin: 1,\r\n                borderWidth: 0,\r\n                width: 20,\r\n                height: 20,\r\n                background: 'rgb('+c.r+', '+c.g+', '+c.b+')'\r\n            };\r\n            if (idx === this.state.selected) {\r\n                style.borderWidth = '3px';\r\n                style.borderStyle = 'solid';\r\n                style.borderColor = 'black';\r\n            }\r\n            let button = <button\r\n                key={idx}\r\n                onClick={this.clickColor(idx)}\r\n                style={style}/>;\r\n            \r\n            return button;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (<div style={{display: 'flex', flexDirection: 'row'}}>\r\n            <div>\r\n                <div style={{padding: 5}}>\r\n                    <div><button style={{padding: 0, borderWidth: 0, width: 40, height: 40, background: 'rgb('+this.state.r+', '+this.state.g+', '+this.state.b+')'}}></button></div>\r\n                    <div>R: <input type='number' value={this.state.r} onChange={this.setColor('r')} /></div>\r\n                    <div>G: <input type='number' value={this.state.g} onChange={this.setColor('g')}/></div>\r\n                    <div>B: <input type='number' value={this.state.b} onChange={this.setColor('b')}/></div>\r\n                    <div><button onClick={() => this.addColor()}>+</button></div>\r\n                </div>\r\n                <div style={{padding: 5, maxWidth: 370}}>\r\n                    {this.getPallette()}\r\n                </div>\r\n                <div style={{padding: 5}}>\r\n                    <button style={{margin: 5}} onClick={() => this.onSave()}>Save</button>\r\n                    <button style={{margin: 5}} onClick={() => this.onLoad()}>Load</button>\r\n                    <button style={{margin: 5}} onClick={() => this.onCopy()}>Copy</button>\r\n                </div>\r\n                <div style={{padding: 10}}>\r\n                    <textarea id='textInput' value={this.state.textValue} onChange={e => this.onTextUpdated(e)}/>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div style={{padding: 5}}>\r\n                    <div>W: <input type='number' value={this.state.w} onChange={this.setColor('w')} /></div>\r\n                    <div>H: <input type='number' value={this.state.h} onChange={this.setColor('h')} /></div>\r\n                    <div>D: <input type='number' value={this.state.d} onChange={this.setColor('d')} /></div>\r\n                    <button style={{margin: 5}} onClick={() => this.resize()}>Resize</button>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {initGraphics, selectColor, addColor, resize} from './components/Main';\r\nimport Controls from './components/controls';\r\n\r\nlet canvas = document.getElementById('canvas');\r\n\r\ndocument.body.setAttribute('style', 'margin: 0px');\r\n\r\nfunction start() {\r\n    canvas.width = 800\r\n    canvas.height = 600;\r\n\r\n    let gl = canvas.getContext('webgl');\r\n    if (!gl) {\r\n        alert(\"WebGL not available.\");\r\n        return;\r\n    }\r\n\r\n    gl.clearColor(0, 0, 0, 1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    initGraphics(canvas, gl, canvas.width, canvas.height);\r\n}\r\n\r\nlet root = document.getElementById('root');\r\nReactDOM.render(<Controls selectColor={selectColor} addColor={addColor} resize={resize} />, root);\r\n\r\nstart();"],"sourceRoot":""}